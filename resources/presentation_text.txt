3. Semantic Kernel (8 minutes)
Introduction
Semantic Kernel is an open source SDK developed and supported by Microsoft and open-source community.
The SDK provides you with the orchestration tools needed to develop AI powered agents in the language of your choice. It is parallelly being developed in three programming languages which are C#, Python and Java and it has already achieved V1 in all languages.
The Kernel is the center of everything. 
The tool is in the center of the AI stack, it allows not only seamless communication with LLMs by different providers but also it enhances the power of Large Language Models by providing them the ability to execute native code blocks or recall from a memory store 
Foundations: Plugins and Connectors:
Plugins and Connectors are the bread and butter of Semantic Kernel.
Connectors are how you can connect to different services like different AI models and databases intended to serve as a long-term memory to our LLM application. Using Connectors you can define that for LLM you can use OpenAI GPT model, Azure GPT model or an Open-Source model from Hugging Face.
Plugins on the other side act as tool boxes, which you define and the LLM can use. 
In this tool boxes you can create two types of functions: 
Native Code functions: Functions defined with native code which execute an action.
Templated Prompt functions: Functions which are defined with a templated prompt, which will later be filed with values coming dynamically from your application runtime logic. 
Applications: Planners
When we have a problem which we want to resolve using AI agents build with Semantic Kernel we have two ways of doing so. 
The first one is to orchestrate functions with code, which can be helpful and serve the purpose with some cases, the drawbacks of it are  that some tasks can be tedious to operate, as well as you can not foresee all the possible ways a user might want to use your agent. 
The second way is to leverage the power of AI and ask it to define plans for achieving a user request or a goal.
The first step is by defining Plugins containing functions with well-defined description of their Purpose, Input and Output than we can ask AI to mix-and-match them in order to achieve the goal.
This allows your agent to achieve things that were not hardcoded in your application logic but also resolve problems that the developer never have planned. 
This is a functionality currently is reliable only with the user’s overlooking the AI, but with models getting better over time you will never know.
Future Directions: Agents and Multi-Agent architecture 
Semantic Kernel is actively developing in the ever changing world of AI. 
With new models and patterns coming out every day it’s hard to keep up with the trend, but Microsoft and the Open-source community do it.
Now their focus is towards the Agent and Multi-agent architecture patterns.

What is Agent?
An agent is a combination of the previous concepts we discussed combined together.
An agent can have role description, both short-term and long-term memory and a set of tools or so called plugins. 
Leveraging all these tools together can create a specialized virtual assistant capable of achieving a task.
A financial analysts agent that can quickly find specific information in company reports or answer detailed questions by breaking them down into simpler parts. Think of them as smart helpers that can understand and carry out  requests.
OpenAI GPTs
OpenAI has introduced agents in their main product ChatGPT. Their Agent implementation is GPTs. 
With GPTs you can create a highly specialized LLM agent which can help you in your specific task. 
They also created the OpenAI Assistants API which exposes the GPTs functionality through an API. 
Semantic Kernel Agents
Semantic Kernel’s team is working on an implementation of the Agent pattern.
They currently have an experimental package which allows you to connect to OpenAI Assistants API to create an use agents in your application but their goal for the future is to create an implement an abstraction which will allow you to create Agents with any model. 